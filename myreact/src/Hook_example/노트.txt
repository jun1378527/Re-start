useState

상태 변수를 선언하는 데 사용됩니다. 함수형 컴포넌트에서 상태를 관리할 수 있게 해줍니다.

useEffect

부수 효과(side effects)를 수행하는 데 사용됩니다. 예를 들어, 데이터 가져오기, 구독 설정, DOM 조작 등이 있습니다.

seContext

컨텍스트를 사용하여 데이터를 공유할 수 있게 해줍니다.

useReducer

상태 관리를 위해 리듀서를 사용하는 훅입니다. 복잡한 상태 로직을 다룰 때 유용합니다.

useRef

DOM 요소나 유지되고 싶은 값을 저장할 수 있는 훅입니다.

useMemo

메모이제이션된 값을 반환하여 성능을 최적화하는 훅입니다. 연산 비용이 큰 함수의 결과를 기억해두고, 의존성 배열이 변경될 때만 재계산합니다.


useCallback
메모이제이션된 콜백 함수를 반환하여 성능을 최적화합니다. useMemo와 유사하지만, 함수 자체를 메모이제이션하는 데 사용됩니다.

useLayoutEffect

useEffect와 비슷하지만, 모든 DOM 변경 후 동기적으로 호출됩니다. 레이아웃을 측정하거나 DOM을 읽고 쓸 때 사용합니다.

useImperativeHandle

ref를 커스텀하기 위해 사용됩니다. forwardRef와 함께 사용하여 컴포넌트 외부에서 특정 인스턴스 메서드를 사용할 수 있도록 합니다.

useDebugValue

사용자 정의 훅의 디버깅 정보를 제공하는 데 사용됩니다. React 개발자 도구에서만 사용됩니다.

커스텀 훅(Custom Hooks)
커스텀 훅은 반복되는 로직을 재사용 가능하게 만드는 데 매우 유용합니다. 예를 들어, 폼 처리, 데이터 페칭 등을 위한 커스텀 훅을 만들 수 있습니다.